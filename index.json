[{"authors":["admin"],"categories":null,"content":"I am working on technologies and methodologies towards a new generation of products that improve how people collaborate with others and their cyber-physical ecosystems.\nMy current interests encompass a broad spectrum of areas from computer-aided software verification and developer tools to help developers produce high-reliability and high-quality software faster to the combination of robotics, IoT and architecture to improve the quality of life of those who live in highly populated areas. For more details, see my ongoing projects - don\u0026rsquo;t hesitate to contact me for more information!\nI hold a D.Phil. (PhD) in Computer Science from the University of Oxford. I have been fortunate to have experienced the universities and companies in Portugal, Canada, The Netherlands, Switzerland, Turkey, USA and the United Kingdom. For more details on my education and industrial experience, see my résumé.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://marcelosousa.net/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"I am working on technologies and methodologies towards a new generation of products that improve how people collaborate with others and their cyber-physical ecosystems.\nMy current interests encompass a broad spectrum of areas from computer-aided software verification and developer tools to help developers produce high-reliability and high-quality software faster to the combination of robotics, IoT and architecture to improve the quality of life of those who live in highly populated areas.","tags":null,"title":"Marcelo Sousa","type":"authors"},{"authors":["Marcelo Sousa"],"categories":[],"content":"","date":1563217134,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1563217134,"objectID":"7bc825137e1f9e2b47c1626a6e5c1875","permalink":"https://marcelosousa.net/project/gotodev/","publishdate":"2019-07-15T20:58:54+02:00","relpermalink":"/project/gotodev/","section":"project","summary":"","tags":[],"title":"Goto.dev","type":"project"},{"authors":["Marcelo Sousa"],"categories":[],"content":"Even though many programmers rely on 3-way merge tools to integrate changes from different branches, such tools can introduce subtle bugs in the integration process. This paper aims to mitigate this problem by defining a semantic notion of conflict-freedom, which ensures that the merged program does not introduce new unwanted behaviors. We also show how to verify this property using a novel, compositional algorithm that combines lightweight summarization for shared program fragments with precise relational reasoning for the modifications. Towards this goal, our method uses a 4-way differencing algorithm on abstract syntax trees to represent different program versions as edits applied to a shared program with holes. This representation allows our verification algorithm to reason about different edits in isolation and compose them to obtain an overall proof of conflict freedom. We have implemented the proposed technique in a new tool called SafeMerge and evaluate it on 52 real-world merge scenarios obtained from Github. The experimental results demonstrate the benefits of our approach over syntactic conflict-freedom and indicate that SafeMerge is both precise and practical.\nJoint-work with Isil Dillig and Shuvendu Lahiri.\n","date":1541788200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1563216279,"objectID":"d64a04dc61e9dd305e35625fecda3ed7","permalink":"https://marcelosousa.net/talk/verified-3way-merge/","publishdate":"2018-11-09T13:30:00-05:00","relpermalink":"/talk/verified-3way-merge/","section":"talk","summary":"Even though many programmers rely on 3-way merge tools to integrate changes from different branches, such tools can introduce subtle bugs in the integration process. This paper aims to mitigate this problem by defining a semantic notion of conflict-freedom, which ensures that the merged program does not introduce new unwanted behaviors. We also show how to verify this property using a novel, compositional algorithm that combines lightweight summarization for shared program fragments with precise relational reasoning for the modifications.","tags":[],"title":"Verified Tree-Way Program Merge","type":"talk"}]